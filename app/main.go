package main

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"os"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

var db *sql.DB

func getEnvOrDefault(key string, defaultValue string) string {
	var (
		v     string
		exist bool
	)
	if v, exist = os.LookupEnv(key); !exist {
		return defaultValue
	}
	return v
}

func main() {
	var err error
	dbUsername := getEnvOrDefault("MYSQL_USERNAME", "root")
	dbPassword := getEnvOrDefault("MYSQL_PASSWORD", "root")
	dbHost := getEnvOrDefault("MYSQL_HOST", "localhost")
	dbName := getEnvOrDefault("MYSQL_DBNAME", "appdb")

	db, err = sql.Open("mysql", fmt.Sprintf("%s:%s@tcp(%s:3306)/%s", dbUsername, dbPassword, dbHost, dbName))
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	_, err = db.Exec(`CREATE TABLE IF NOT EXISTS users (
		id INT AUTO_INCREMENT PRIMARY KEY,
		username VARCHAR(255) NOT NULL,
		password VARCHAR(255) NOT NULL,
		bio TEXT
	)`)
	if err != nil {
		log.Fatal(err)
	}
	_, err = db.Exec(`INSERT INTO users (username, password, bio) VALUES
		('admin', 'adminpassword', 'Hello <script>alert("Hello")</script>'),
		('user1', 'password1', 'Bio of User 1'),
		('user2', 'password2', 'Bio of User 2'),
		('user3', 'password3', 'Bio of User 3'),
		('user4', 'password4', 'Bio of User 4'),
		('user5', 'password5', 'Bio of User 5'),
		('user6', 'password6', 'Bio of User 6'),
		('user7', 'password7', 'Bio of User 7'),
		('user8', 'password8', 'Bio of User 8'),
		('user9', 'password9', 'Bio of User 9')
	`)
	if err != nil {
		log.Fatal(err)
	}

	http.HandleFunc("/login", loginHandler)
	http.HandleFunc("/logout", logoutHandler)
	http.HandleFunc("/profile", profileHandler)
	http.HandleFunc("/", profileHandler)

	log.Println("Starting server on :8080...")
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func loginHandler(w http.ResponseWriter, r *http.Request) {
	if cookie, err := r.Cookie("session_token"); err == nil && cookie.Value != "" {
		log.Println("User already logged in, redirecting to profile")
		http.Redirect(w, r, "/profile?id="+cookie.Value, http.StatusSeeOther)
		return
	}
	if r.Method == http.MethodPost {
		username := r.FormValue("username")
		password := r.FormValue("password")

		query := fmt.Sprintf("SELECT id FROM users WHERE username='%s' AND password='%s'", username, password)
		row := db.QueryRow(query)
		var id int
		err := row.Scan(&id)
		if err != nil {
			http.Error(w, "Invalid credentials", http.StatusUnauthorized)
			return
		}
		http.SetCookie(w, &http.Cookie{
			Name:    "session_token",
			Value:   fmt.Sprintf("%d", id),
			Expires: time.Now().Add(1 * time.Hour),
		})
		http.Redirect(w, r, fmt.Sprintf("/profile?id=%d", id), http.StatusSeeOther)
	} else {
		w.Header().Add("Content-Type", "text/html")
		w.Write([]byte(`<form method="POST" action="/login">
            Username: <input type="text" name="username"><br>
            Password: <input type="password" name="password"><br>
            <input type="submit" value="Login">
        </form>`))
	}
}

func logoutHandler(w http.ResponseWriter, r *http.Request) {
	http.SetCookie(w, &http.Cookie{
		Name:    "session_token",
		Value:   "",
		Expires: time.Unix(0, 0),
		Path:    "/",
	})
	log.Println("User logged out")
	http.Redirect(w, r, "/login", http.StatusSeeOther)
}

func profileHandler(w http.ResponseWriter, r *http.Request) {
	id := r.URL.Query().Get("id")
	if id == "" {
		http.Error(w, "Missing user ID", http.StatusBadRequest)
		return
	}

	query := fmt.Sprintf("SELECT username, bio FROM users WHERE id=%s", id)
	row := db.QueryRow(query)
	var username, bio string
	err := row.Scan(&username, &bio)
	if err != nil {
		http.Error(w, "User not found", http.StatusNotFound)
		return
	}

	profileTemplate := `<html><body>
        <h1>Profile of %s</h1>
        <p>%s</p>
        </body></html>`
	fmt.Fprintf(w, profileTemplate, username, bio)
}
